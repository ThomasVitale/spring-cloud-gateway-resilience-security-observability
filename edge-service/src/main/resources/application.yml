server:
  port: 9000

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
      show-components: always
  metrics:
    distribution:
      percentiles-histogram:
        all: true
        http.server.requests: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

spring:
  application:
    name: edge-service

  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: edge-service
            client-secret: polar-keycloak-secret
            scope: openid
        provider:
          keycloak:
            issuer-uri: ${KEYCLOAK_URL:http://localhost:8080}/realms/PolarBookshop

  cloud:
    gateway:
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
      routes:
        - id: book-route
          uri: ${BOOK_SERVICE_URL:http://localhost:9001}
          predicates:
            - Path=/books/**
          filters:
            - AddRequestHeader=X-Tenant,acme
            - AddResponseHeader=X-Genre,fantasy
            - name: CircuitBreaker
              args:
                name: bookService
                fallbackUri: forward:/books-fallback
            - name: Retry
              args:
                retries: 3
                method: GET
                backoff:
                  firstBackoff: 50ms
                  maxBackoff: 500ms

resilience4j:
  circuitbreaker:
    instances:
      bookService:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        registerHealthIndicator: true
  timelimiter:
    instances:
      bookService:
        timeoutDuration: 3s

arconia:
  otel:
    metrics:
      interval: 5s
